n_males[i] <- n_males[i] + 1
} else {
n_unk[i] <- n_unk[i] + 1
}
}
}
total <- data.frame("Male" = n_males, "Female" = n_females, "Unknown" = n_unk)
return(total)
}
gender_info <- gender_function(loans$borrower_genders)
loans$males <- gender_info[,1]
loans$females <- gender_info[,2]
loans$unknown <- gender_info[,3]
loans %>%
filter(unknown != 0) %>%
glimpse()
loans_filtered <- loans %>%
filter(unknown == 0) %>%
mutate(all_females = ifelse(females != 0 & males == 0, TRUE, FALSE))
ggplot(
data = loans_filtered,
aes(x = all_females, y = funded_amount)
) + geom_boxplot()
filter_amount <- sd(loans_filtered$funded_amount) + 3 * mean(loans_filtered$funded_amount)
loans_small <- loans_filtered %>%
filter(funded_amount <= filter_amount)
ggplot(
data = loans_small,
aes(x = all_females, y = funded_amount)
) + geom_boxplot()
ggplot(
data = filter(loans_filtered, funded_amount > filter_amount),
aes(x = all_females, y = funded_amount)
) + geom_boxplot()
ggplot(
data = loans_filtered,
aes(x = all_females, y = lender_count)
) + geom_boxplot()
lenders_filter <- sd(loans_filtered$lender_count) + 3 * mean(loans_filtered$lender_count)
ggplot(
data = filter(loans_filtered, lender_count <= lenders_filter),
aes(x = all_females, y = lender_count)
) + geom_boxplot()
ggplot(
data = filter(loans_filtered, lender_count > lenders_filter),
aes(x = all_females, y = lender_count)
) + geom_boxplot()
loans_filtered <- loans_filtered %>%
mutate(amountPerLender = funded_amount/lender_count)
ggplot(
data = loans_filtered,
aes(x = all_females, y = amountPerLender)
) + geom_boxplot()
amount_filter <- sd(loans_filtered$amountPerLender, na.rm = T) + 2 * mean(loans_filtered$amountPerLender, na.rm = T)
ggplot(
data = filter(loans_filtered, amountPerLender <= amount_filter),
aes(x = all_females, y = amountPerLender)
) + geom_boxplot()
ggplot(
data = filter(loans_filtered, amountPerLender > amount_filter),
aes(x = all_females, y = amountPerLender)
) + geom_boxplot()
initialFormula <- as.formula(funded_amount ~ term_in_months + males +
females + lender_count)
#Repetitions
R <- 50
# Observations
n <- nrow(loans_filtered)
#errorInitial <-
ind <- sample(1:n, size = n * 0.1, replace = F)
randomForest(initialFormula, data = loans_filtered[ind,])
?randomForest
lm(initialFormula, data = loans_filtered[ind,])
lmModel <- lm(initialFormula, data = loans_filtered[ind,])
lmPred <- predict(lmModel, loans_filtered[-ind,])
errorInitial[1,1] <- RMSE(lmPred, loans_filtered$funded_amount[ind])
lmModel <- lm(initialFormula, data = loans_filtered[ind,])
lmPred <- predict(lmModel, loans_filtered[-ind,])
#errorInitial[1,1] <-
RMSE(lmPred, loans_filtered$funded_amount[ind])
lmModel <- lm(initialFormula, data = loans_filtered[ind,])
lmPred <- predict(lmModel, loans_filtered[-ind,])
#errorInitial[1,1] <-
RMSE(lmPred, loans_filtered$funded_amount[-ind])
lmModel <- lm(initialFormula, data = loans_filtered[ind,])
lmPred <- predict(lmModel, loans_filtered[-ind,])
lmPred[lmPred < 0] <- 0
#errorInitial[1,1] <-
RMSE(lmPred, loans_filtered$funded_amount[-ind])
lmModel <- lm(initialFormula, data = loans_filtered[ind,])
lmPred <- predict(lmModel, loans_filtered[-ind,])
#lmPred[lmPred < 0] <- 0
#errorInitial[1,1] <-
RMSE(lmPred, loans_filtered$funded_amount[-ind])
lmModel <- lm(initialFormula, data = loans_filtered[ind,])
lmPred <- predict(lmModel, loans_filtered[-ind,])
lmPred[lmPred < 0] <- 0
#errorInitial[1,1] <-
RMSE(lmPred, loans_filtered$funded_amount[-ind])
lassoModel <- cv.glmnet(initialFormula, data = loans_filtered[ind,],
alpha = 1)
model.matrix(initialFormula, loans_filtered[ind,])
model.matrix(initialFormula, loans_filtered[ind,])[,-1]
lassoPredictors <- model.matrix(initialFormula, loans_filtered[ind,])[,-1]
lassoResponse <- loans_filtered$funded_amount[ind]
cv.glmnet(lassoPredictors, lassoResponse, alpha = 1)
lassoPredictors <- model.matrix(initialFormula, loans_filtered[ind,])[,-1]
lassoResponse <- loans_filtered$funded_amount[ind]
lassoLambda <- cv.glmnet(lassoPredictors, lassoResponse, alpha = 1)$lambda.min
lassoPredictors <- model.matrix(initialFormula, loans_filtered[ind,])[,-1]
lassoResponse <- loans_filtered$funded_amount[ind]
lassoLambda <- cv.glmnet(lassoPredictors, lassoResponse, alpha = 1)$lambda.min
lassoModel <- glmnet(lassoPredictors, lassoResponse, alpha = 1, lambda = lassoLambda)
lassoPredictors <- model.matrix(initialFormula, loans_filtered[ind,])[,-1]
lassoResponse <- loans_filtered$funded_amount[ind]
lassoLambda <- cv.glmnet(lassoPredictors, lassoResponse, alpha = 1)$lambda.min
lassoModel <- glmnet(lassoPredictors, lassoResponse, alpha = 1, lambda = lassoLambda)
lassoPred <- predict(lassoModel, loans_filtered$funded_amount[-ind])
lassoPredictors <- model.matrix(initialFormula, loans_filtered[ind,])[,-1]
lassoResponse <- loans_filtered$funded_amount[ind]
lassoLambda <- cv.glmnet(lassoPredictors, lassoResponse, alpha = 1)$lambda.min
lassoModel <- glmnet(lassoPredictors, lassoResponse, alpha = 1, lambda = lassoLambda)
lassoPred <- predict(lassoModel, loans_filtered[-ind])
lassoPredictors <- model.matrix(initialFormula, loans_filtered)[,-1]
lassoResponse <- loans_filtered$funded_amount
lassoLambda <- cv.glmnet(lassoPredictors[ind,], lassoResponse[ind], alpha = 1)$lambda.min
lassoModel <- glmnet(lassoPredictors[ind,], lassoResponse[ind],
alpha = 1,
lambda = lassoLambda)
lassoPred <- predict(lassoModel, lassoPredictors[-ind,])
lassoPred[lassoPred < 0] <- 0
RMSE(lassoPred, loans_filtered$funded_amount[-ind])
initialFormula <- as.formula(funded_amount ~ term_in_months + males +
females + lender_count)
#Repetitions
R <- 50
# Observations
n <- nrow(loans_filtered)
errorInitial <- tibble(`Linear Model` = rep(0, R),
`Lasso Model` = rep(0, R),
`Random Forest` = rep(0, R))
for (i in 1:R){
ind <- sample(1:n, size = n * 0.1, replace = F)
#Create linear model
lmModel <- lm(initialFormula, data = loans_filtered[ind,])
lmPred <- predict(lmModel, loans_filtered[-ind,])
lmPred[lmPred < 0] <- 0
errorInitial[R,1] <- RMSE(lmPred, loans_filtered$funded_amount[-ind])
#Create Lasso Model
lassoPredictors <- model.matrix(initialFormula, loans_filtered)[,-1]
lassoResponse <- loans_filtered$funded_amount
lassoLambda <- cv.glmnet(lassoPredictors[ind,], lassoResponse[ind], alpha = 1)$lambda.min
lassoModel <- glmnet(lassoPredictors[ind,], lassoResponse[ind],
alpha = 1,
lambda = lassoLambda)
lassoPred <- predict(lassoModel, lassoPredictors[-ind,])
lassoPred[lassoPred < 0] <- 0
errorInitial[R,1] <- RMSE(lassoPred, loans_filtered$funded_amount[-ind])
# Create Random Forest Model
rfModel <- randomForest(initialFormula, data = loans_filtered[ind,], ntree = 250)
rfPred <- predict(rfModel, loans_filtered[-ind,])
rfPred[rfPred < 0] <- 0
errorInitial[R, 3] <- RMSE(rfPred, loans_filtered$funded_amount[-ind])
}
initialFormula <- as.formula(funded_amount ~ term_in_months + males +
females + lender_count)
#Repetitions
R <- 25
# Observations
n <- nrow(loans_filtered)
errorInitial <- tibble(`Linear Model` = rep(0, R),
`Lasso Model` = rep(0, R),
`Random Forest` = rep(0, R))
for (i in 1:R){
ind <- sample(1:n, size = n * 0.1, replace = F)
#Create linear model
lmModel <- lm(initialFormula, data = loans_filtered[ind,])
lmPred <- predict(lmModel, loans_filtered[-ind,])
lmPred[lmPred < 0] <- 0
errorInitial[R,1] <- RMSE(lmPred, loans_filtered$funded_amount[-ind])
#Create Lasso Model
lassoPredictors <- model.matrix(initialFormula, loans_filtered)[,-1]
lassoResponse <- loans_filtered$funded_amount
lassoLambda <- cv.glmnet(lassoPredictors[ind,], lassoResponse[ind], alpha = 1)$lambda.min
lassoModel <- glmnet(lassoPredictors[ind,], lassoResponse[ind],
alpha = 1,
lambda = lassoLambda)
lassoPred <- predict(lassoModel, lassoPredictors[-ind,])
lassoPred[lassoPred < 0] <- 0
errorInitial[R,1] <- RMSE(lassoPred, loans_filtered$funded_amount[-ind])
# Create Random Forest Model
rfModel <- randomForest(initialFormula, data = loans_filtered[ind,], ntree = 250)
rfPred <- predict(rfModel, loans_filtered[-ind,])
rfPred[rfPred < 0] <- 0
errorInitial[R, 3] <- RMSE(rfPred, loans_filtered$funded_amount[-ind])
}
gatheredInitialError <- gather(errorInitial, key = "Method", value = "RMSE")
ggplot(
data = gatheredInitialError,
aes(x = Method, y = RMSE)
) + geom_boxplot()
View(gatheredInitialError)
View(gatheredInitialError)
View(errorInitial)
View(errorInitial)
initialFormula <- as.formula(funded_amount ~ term_in_months + males +
females + lender_count)
#Repetitions
R <- 25
# Observations
n <- nrow(loans_filtered)
errorInitial <- tibble(`Linear Model` = rep(0, R),
`Lasso Model` = rep(0, R),
`Random Forest` = rep(0, R))
for (i in 1:R){
ind <- sample(1:n, size = n * 0.1, replace = F)
#Create linear model
lmModel <- lm(initialFormula, data = loans_filtered[ind,])
lmPred <- predict(lmModel, loans_filtered[-ind,])
lmPred[lmPred < 0] <- 0
errorInitial[i,1] <- RMSE(lmPred, loans_filtered$funded_amount[-ind])
#Create Lasso Model
lassoPredictors <- model.matrix(initialFormula, loans_filtered)[,-1]
lassoResponse <- loans_filtered$funded_amount
lassoLambda <- cv.glmnet(lassoPredictors[ind,], lassoResponse[ind], alpha = 1)$lambda.min
lassoModel <- glmnet(lassoPredictors[ind,], lassoResponse[ind],
alpha = 1,
lambda = lassoLambda)
lassoPred <- predict(lassoModel, lassoPredictors[-ind,])
lassoPred[lassoPred < 0] <- 0
errorInitial[i,2] <- RMSE(lassoPred, loans_filtered$funded_amount[-ind])
# Create Random Forest Model
rfModel <- randomForest(initialFormula, data = loans_filtered[ind,], ntree = 250)
rfPred <- predict(rfModel, loans_filtered[-ind,])
rfPred[rfPred < 0] <- 0
errorInitial[i, 3] <- RMSE(rfPred, loans_filtered$funded_amount[-ind])
}
10 %/% 5
10 %*% 5
10 %% 5
5 %% 5
6 %% 5
cat("Iteration:", i)
initialFormula <- as.formula(funded_amount ~ term_in_months + males +
females + lender_count)
#Repetitions
R <- 25
# Observations
n <- nrow(loans_filtered)
errorInitial <- tibble(`Linear Model` = rep(0, R),
`Lasso Model` = rep(0, R),
`Random Forest` = rep(0, R))
set.seed(1982)
for (i in 1:R){
ind <- sample(1:n, size = n * 0.1, replace = F)
#Create linear model
lmModel <- lm(initialFormula, data = loans_filtered[ind,])
lmPred <- predict(lmModel, loans_filtered[-ind,])
lmPred[lmPred < 0] <- 0
errorInitial[i,1] <- RMSE(lmPred, loans_filtered$funded_amount[-ind])
#Create Lasso Model
lassoPredictors <- model.matrix(initialFormula, loans_filtered)[,-1]
lassoResponse <- loans_filtered$funded_amount
lassoLambda <- cv.glmnet(lassoPredictors[ind,], lassoResponse[ind], alpha = 1)$lambda.min
lassoModel <- glmnet(lassoPredictors[ind,], lassoResponse[ind],
alpha = 1,
lambda = lassoLambda)
lassoPred <- predict(lassoModel, lassoPredictors[-ind,])
lassoPred[lassoPred < 0] <- 0
errorInitial[i,2] <- RMSE(lassoPred, loans_filtered$funded_amount[-ind])
# Create Random Forest Model
rfModel <- randomForest(initialFormula, data = loans_filtered[ind,], ntree = 250)
rfPred <- predict(rfModel, loans_filtered[-ind,])
rfPred[rfPred < 0] <- 0
errorInitial[i, 3] <- RMSE(rfPred, loans_filtered$funded_amount[-ind])
if (i %% 5 == 0){
cat("Iteration:", i)
}
}
save.image("finalProject.RData")
load("finalProject.RData")
loans_filtered$sectorFactor <- as.factor(loans_filtered$sector)
loans_filtered$countryFactor <- as.factor(loans_filtered$country)
R = 50
n = nrow(loans_filtered)
testRMSE <- data.frame("Regular_LM" = rep(0, 50),
"Mixed_LM_Sector" = rep(0, 50),
"Mixed_LM_Sector_Country" = rep(0, 50),
"Mixed_LM_Sector_Int" = rep(0, 50))
set.seed(1982)
for (i in 1:R) {
ind <- holdout(1:n, ratio = .6, mode = "stratified")
loans_filtered_tr <- loans_filtered[ind$tr,]
loans_filtered_ts <- loans_filtered[ind$ts,]
lm_reg <- lm(funded_amount ~ term_in_months + males
+ females + lender_count,
data = loans_filtered_tr)
lm_reg_pred <- predict(object = lm_reg,
loans_filtered_ts)
testRMSE[i,1] <- RMSE(lm_reg_pred, loans_filtered_ts$funded_amount)
lm_sector <- lmer(funded_amount ~ term_in_months + males + females + lender_count +
(1|sectorFactor),
data = loans_filtered_tr)
lm_sector_pred <- predict(object = lm_sector, loans_filtered_ts)
testRMSE[i,2] <- RMSE(lm_sector_pred, loans_filtered_ts$funded_amount)
lm_sectorCountry <- lmer(funded_amount ~ term_in_months + males + females
+ lender_count + (1|sectorFactor:countryFactor),
data = loans_filtered_tr)
lm_sectorCountry_pred <- predict(object = lm_sectorCountry,
loans_filtered_ts,
allow.new.levels = T)
testRMSE[i,3] <- RMSE(lm_sectorCountry_pred, loans_filtered_ts$funded_amount)
lm_sectorInt <- lmer(funded_amount ~ term_in_months + males +
females + lender_count +
(1 + term_in_months + males +
females + lender_count|sectorFactor),
data = loans_filtered_tr)
lm_sectorInt_pred <- predict(object = lm_sectorInt,
loans_filtered_ts)
testRMSE[i,4] <- RMSE(lm_sectorInt_pred, loans_filtered_ts$funded_amount)
cat("Got this far:", i, "\n")
}
loans_filtered$sectorFactor <- as.factor(loans_filtered$sector)
loans_filtered$countryFactor <- as.factor(loans_filtered$country)
R = 50
n = nrow(loans_filtered)
testRMSE <- data.frame("Regular_LM" = rep(0, 50),
"Mixed_LM_Sector" = rep(0, 50),
"Mixed_LM_Sector_Country" = rep(0, 50))
set.seed(1982)
for (i in 1:R) {
ind <- holdout(1:n, ratio = .6, mode = "stratified")
loans_filtered_tr <- loans_filtered[ind$tr,]
loans_filtered_ts <- loans_filtered[ind$ts,]
lm_reg <- lm(funded_amount ~ term_in_months + males
+ females + lender_count,
data = loans_filtered_tr)
lm_reg_pred <- predict(object = lm_reg,
loans_filtered_ts)
testRMSE[i,1] <- RMSE(lm_reg_pred, loans_filtered_ts$funded_amount)
lm_sector <- lmer(funded_amount ~ term_in_months + males + females + lender_count +
(1|sectorFactor),
data = loans_filtered_tr)
lm_sector_pred <- predict(object = lm_sector, loans_filtered_ts)
testRMSE[i,2] <- RMSE(lm_sector_pred, loans_filtered_ts$funded_amount)
lm_sectorCountry <- lmer(funded_amount ~ term_in_months + males + females
+ lender_count + (1|sectorFactor:countryFactor),
data = loans_filtered_tr)
lm_sectorCountry_pred <- predict(object = lm_sectorCountry,
loans_filtered_ts,
allow.new.levels = T)
testRMSE[i,3] <- RMSE(lm_sectorCountry_pred, loans_filtered_ts$funded_amount)
cat("Got this far:", i, "\n")
}
save.image("finalProject.RData")
gatheredRMSE <- gather(testRMSE, "Model", "RMSE")
ggplot(
data = gatheredRMSE,
aes(x = Model, y = RMSE)
) + geom_boxplot()
gatheredRMSE %>%
group_by(Model) %>%
summarize(Average_RMSE = mean(RMSE))
gatheredInitialError <- gather(errorInitial, key = "Method", value = "RMSE")
ggplot(
data = gatheredInitialError,
aes(x = Method, y = RMSE)
) + geom_boxplot()
glimpse(loans)
glimpse(loans[,1:20])
glimpse(loans[,1:20])
ggplot(
data = gatheredInitialError,
aes(x = Method, y = RMSE)
) + geom_boxplot()
gatheredRMSE <- gather(testRMSE, "Model", "RMSE")
ggplot(
data = gatheredRMSE,
aes(x = Model, y = RMSE)
) + geom_boxplot()
gatheredRMSE %>%
group_by(Model) %>%
summarize(Average_RMSE = mean(RMSE))
lm_sectorCountry
summary(lm_sectorCountry)
save.image("finalProject.RData")
shiny::runApp('GitHub/Data-Viz-Final-Project/SB Dashboard App')
runApp('GitHub/Data-Viz-Final-Project/SB Dashboard App')
runApp('GitHub/Data-Viz-Final-Project/SB Dashboard App')
runApp('GitHub/Data-Viz-Final-Project/SB Dashboard App')
code_enf  <- read.csv("./data/Code_Enforcement_Cases.csv",
stringsAsFactors = FALSE)
setwd("~/GitHub/Data-Viz-Final-Project")
code_enf  <- read.csv("./data/Code_Enforcement_Cases.csv",
stringsAsFactors = FALSE)
code.spatial <- SpatialPointsDataFrame(coords = code_enf[,c("Lon","Lat")], data = code_enf,
proj4string = CRS("+proj=longlat +datum=WGS84"))
code.spatial$Case_Type_Code_Description <- as.factor(code.spatial$Case_Type_Code_Description)
library(rgdal)
library(leaflet)
library(tidyverse)
library(rgeos)
setwd("~/GitHub/Data-Viz-Final-Project")
code_enf  <- read.csv("./data/Code_Enforcement_Cases.csv",
stringsAsFactors = FALSE)
code.spatial <- SpatialPointsDataFrame(coords = code_enf[,c("Lon","Lat")], data = code_enf,
proj4string = CRS("+proj=longlat +datum=WGS84"))
code.spatial$Case_Type_Code_Description <- as.factor(code.spatial$Case_Type_Code_Description)
########### Load data sets ###########
#Abandoned Property data
AbandonedPropertyParcels <- readOGR(dsn = "./data/Abandoned_Property_Parcels",
layer = "Abandoned_Property_Parcels",
stringsAsFactors = FALSE)
#City Council data
CityCouncilDistricts <- readOGR(dsn = "./Data/City_Council_Districts",
layer = "City_Council_Districts",
stringsAsFactors = FALSE)
#Cenus data
census <- readOGR(dsn="./Data/2010_Cenusdata",
layer ='2010_CensusData',
stringsAsFactors = FALSE)
AbandonedPropertyParcels.center <- SpatialPointsDataFrame(gCentroid(AbandonedPropertyParcels, byid=TRUE),
AbandonedPropertyParcels@data, match.ID=FALSE)
public_facilities <- read.csv('./data/Public_Facilities.csv')
facilities.spatial <- SpatialPointsDataFrame(coords = public_facilities[,c("Lon","Lat")], data = public_facilities, proj4string = CRS("+proj=longlat +datum=WGS84"))
street_lights <- read.csv("./data/Street_Lights.csv", stringsAsFactors = F)
street_lights[street_lights$Pole_Type %in% c(""," "),]$Pole_Type <- "Unknown"
street_lights[street_lights$Service %in% c(""," "),]$Service <- "Unknown"
street_lights$Inspect_Date2 <- as.Date(street_lights$Inspect_Date)
AbandonedPropertyParcels$popup <- paste("<b>",AbandonedPropertyParcels$Outcome_St,"</b><br>",
"Address: ", AbandonedPropertyParcels$Address_Nu, AbandonedPropertyParcels$Street_Nam,AbandonedPropertyParcels$Suffix, "<br>",
"Structure Type: ", AbandonedPropertyParcels$Structures, "<br>",
"District: ", AbandonedPropertyParcels$Council_Di)
CityCouncilDistricts$popupCouncils <- paste("<b>","District: ", CityCouncilDistricts$OBJECTID, "</b><br>",
"Council Member: ", CityCouncilDistricts$Council_Me)
facilitiesCheckboxChoices <- unique(facilities.spatial@data$POPL_TYPE)
facilitiesCheckboxSelected <- unique(facilities.spatial@data$POPL_TYPE)
#School data
schoolsSpatial <- readOGR(dsn = "./data/School_Boundaries",
layer = "School_Boundaries")
#Park data
parksPoints <- read.csv("./data/Parks_Locations_and_Features.csv",
stringsAsFactors = F)
naReplaceCols <- c('Aqua_Feat__Pool', 'Aqua_Feat__Spray', 'Backstop__Practice', 'Ballfield',
'Basketball', 'Blueway', 'Complex__Ballfield', 'Complex__Tennis',
'Concessions', 'Disk_Golf', 'Driving_Range', 'Educational_Experience',
'Event_Space', 'Fitness_Course', 'Garden__Community', 'Garden__Display',
'Golf', 'Hockey__Ice', 'Loop_Walk', 'MP_Field__Large',
'MP_Field__Multiple', 'MP_Field__Small', 'Multiuse_Court',
'Natural_Area', 'Open_Turf', 'Open_Water', 'Other___Active',
'Other_Passive', 'Passive_Node', 'Picnic_Grounds',
'Playground__Destination', 'Playground__Local', 'Public_Art', 'Shelter',
'Shelter__Group', 'Skate_Park', 'Sledding_Hill', 'Structure', 'Tennis',
'Trail__Primitive', 'Volleyball', 'Water_Access__Developed',
'Water_Access__General', 'Water_Feature')
naReplaceZeros <- function(x){
x <- ifelse(is.na(x), 0, x)
}
stringFeatures <- parksPoints %>%
mutate_at(.vars = naReplaceCols, .funs = naReplaceZeros) %>%
gather(key = "Feature", value = "Amount", naReplaceCols) %>%
filter(Amount > 0) %>%
group_by(Park_Name, Address) %>%
mutate(stringFeatures = paste0(paste0(Feature, ": ", Amount), collapse = "<br>")) %>%
mutate(stringFeatures = gsub(pattern = "_", replacement = " ", stringFeatures)) %>%
mutate(stringFeatures = gsub(pattern = "  ", replacement = " ", stringFeatures)) %>%
group_by(Park_Name, Park_Type, stringFeatures) %>%
summarise()
parksPoints <- parksPoints %>%
left_join(stringFeatures) %>%
mutate(stringFeatures = ifelse(is.na(stringFeatures), "Not Available", stringFeatures))
parksSpatial <- SpatialPointsDataFrame(coords = parksPoints[,c("Lon","Lat")], data = parksPoints,
proj4string = CRS("+proj=longlat +datum=WGS84"))
#Create pop ups
parksSpatial$popup <- paste("<b>",parksSpatial$Park_Name,"</b><br>",
"Type: ",parksSpatial$Park_Type,"<br>",
"Address: ",parksSpatial$Address, "<br>",
"<b>Features</b><br>",
parksSpatial$stringFeatures,
sep ="")
parksChoices <- sort(unique(parksPoints$Park_Type))
schoolChoices <- sort(unique(schoolsSpatial$SchoolType))
#Set color palettes
palParks <- colorFactor(palette = 'RdYlBu', domain = parksSpatial$Park_Type)
palProperties <- colorFactor(palette = "RdYlBu", domain =AbandonedPropertyParcels$Outcome_St)
palCenus <- colorNumeric(palette = "RdYlBu", domain = census$SE_T002_01)
palSchools <- colorFactor(palette = "Dark2", domain = schoolsSpatial$SchoolType)
save.image(file = "SB Dashboard App/appData.RData")
runApp('SB Dashboard App')
runApp('SB Dashboard App')
runApp('SB Dashboard App')
runApp('SB Dashboard App')
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(data.table)
library(psych)
library(lme4)
library(rminer)
library(caret)
library(randomForest)
library(glmnet)
load("finalProject.RData")
summary(lm_sectorCountry)
161236/(161236+197636)
gatheredRMSE <- gather(testRMSE, "Model", "RMSE")
ggplot(
data = gatheredRMSE,
aes(x = Model, y = RMSE)
) + geom_boxplot()
gatheredRMSE %>%
group_by(Model) %>%
summarize(Average_RMSE = mean(RMSE))
